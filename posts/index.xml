<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Research Projects on Sophia Pietsch</title><link>https://cherrykit.github.io/posts/</link><description>Recent content in Research Projects on Sophia Pietsch</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cherrykit.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>PokeDB: Information and Team Suggestions for your Pokemon</title><link>https://cherrykit.github.io/posts/cs348/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/cs348/</guid><description>In a group of four people. we designed and implemented a web application allowing users to look up information on Pokemon and generate team suggestions based on a set of owned Pokemon. We gathered data from open-source datasets on Pokemon and scraped data from the Pokemon showdown website to help us generate good team suggestions.
We wrote a comprehensive report detailing our database design and including images of our UI design, which is available here.</description></item><item><title>UV Relax: Reducing the Distortion of UVs in Houdini</title><link>https://cherrykit.github.io/posts/sidefx/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/sidefx/</guid><description>I spent my 4 month internship at Side Effects Software working on a tool to reduce the distortion of mapping textures onto 3D objects. This tool was designed based on user demand as well as market research into similar tools in other programs. During my internship, I built two prototypes, one using a Least Squares Conformal Mapping and one using Harmonic Maps.
At the end of my internship, I qualitatively compared the approaches in a report, which can be found here.</description></item><item><title>Detecting Similar Malicious Payloads over Encrypted Data</title><link>https://cherrykit.github.io/posts/urf/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/urf/</guid><description>I worked on this project at the Cyptography, Security and Privacy Lab at the University of Waterloo under supervision of Professors Florian Kerschbaum and Ehsan Amjadian. With the goal of creating a shared anomaly detection system over confidential PDF files, I designed a custom PyTorch autoencoder to convert features from PDF files to a format suitable for encryption. Then, I designed a clustering algorithm over the encrypted information, which identifies classes of similar PDFs based on distances between the encrypted feature vectors.</description></item><item><title>Inequality Comparisons over Homomorphically Encrypted Data</title><link>https://cherrykit.github.io/posts/ura/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/ura/</guid><description>Homomorphic encryption allows the evaluation of functions over encrypted data without requiring decryption first. However, only a limited number of computations are possible before decryption becomes infeasible. In particular, the number of possible consecutive multiplications, called multiplicative depth, is limited. Hence, efficient protocols are necessary for basic operations such as comparisons.
Under supervision of Professor Florian Kerschbaum, I spent four months creating and implementing a new algorithm that reduces inequality comparisons over homomorphically encrypted data to a linear number of equality comparisons.</description></item><item><title>Training Connect 4 Agents Against an Optimal Agent</title><link>https://cherrykit.github.io/posts/connect4/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/connect4/</guid><description>In a group of three people. we wrote Temporal Difference Learning (TDL) agents for Connect 4 as part of the “Introduction to Artificial Intelligence” course at the University of Waterloo (CS486). The code is built on top of an existing Java implementation of the Connect 4 game, including an optimal agent. In addition to training with self-play, we modified the TDL algorithm to allow training against this existing optimal agent.</description></item><item><title>A Joos 1W compiler</title><link>https://cherrykit.github.io/posts/compiler/</link><pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate><guid>https://cherrykit.github.io/posts/compiler/</guid><description>The Joos 1W compiler was written in C++ in a group of three people for the &amp;ldquo;Compiler Construction&amp;rdquo; course at the University of Waterloo (CS444). The compiler is for the Joos 1W language, a subset of Java 1.3 including objects, interfaces, arrays and strings. This post gives an overview of the different parts of the compiler and their implementation and is based off of reports written for the course.
Overview The program consists of a series of compiler passes over all Java files passed as input.</description></item></channel></rss>